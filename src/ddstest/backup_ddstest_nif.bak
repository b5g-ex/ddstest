#include <erl_nif.h>
#include <dds/dds.h>
#include "HelloWorldData.h"

static int hensu;

ERL_NIF_TERM ddstest_create(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]){
	dds_entity_t participant;
	dds_entity_t topic;
	dds_entity_t writer;
	dds_entity_t rc;
	uint32_t status = 0;
	HelloWorldData_Msg msg;

	participant = dds_create_participant (DDS_DOMAIN_DEFAULT, NULL, NULL);
	
	topic = dds_create_topic(participant, &HelloWorldData_Msg_desc, "HelloWorldData_Msg", NULL, NULL);
	writer = dds_create_writer(participant, topic, NULL, NULL);
	rc = dds_set_status_mask(writer, DDS_PUBLICATION_MATCHED_STATUS);

	while(!(status & DDS_PUBLICATION_MATCHED_STATUS)){
		rc = dds_get_status_changes(writer, &status);
		if(rc != DDS_RETCODE_OK){
			// printf("dds_get_status_changes: %s\n", dds_strretcode(-rc));
			return enif_make_badarg(env);
		}
		dds_sleepfor(DDS_MSECS(20));
	}

	msg.userID = 1;
	msg.message = "Hello World";

	rc = dds_write(writer, &msg);
	if (rc != DDS_RETCODE_OK){
		//printf("dds_write: %s\n", dds_strretcode(-rc));
		return enif_make_badarg(env);
	}
	rc = dds_delete(participant);

	return enif_make_int(env, 0);
}

ERL_NIF_TERM ddstest_test(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]){
	return enif_make_int(env, 1);
}

ERL_NIF_TERM ddstest_inc_hensu(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]){
	hensu = hensu + 1;
	return enif_make_int(env, hensu);
}

ERL_NIF_TERM ddstest_dec_hensu(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]){
	hensu = hensu -1;
	return enif_make_int(env, hensu);
}

/*
int load(ErlNifEnv *env, void **priv_data, ERL_NIF_TERM load_info){

	return 0;
}
*/

static ErlNifFunc nif_funcs[] ={
	{"ddstest_create", 0, ddstest_create, 0},
	{"ddstest_test", 0, ddstest_test, 0},
	{"ddstest_inc_hensu", 0, ddstest_inc_hensu, 0},
	{"ddstest_dec_hensu", 0, ddstest_dec_hensu, 0},
};

ERL_NIF_INIT(Elixir.Ddstest, nif_funcs, NULL, NULL, NULL, NULL)
